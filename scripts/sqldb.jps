type: install
id: sqldb-multiregion
name: DataBase Multiregion Topology

nodes:
  - nodeType: mariadb-dockerized
    count: 1
    flexibleCloudlets: 16
    nodeGroup: sqldb
    tag: ${settings.tag}
    skipNodeEmails: true
    env:
      REPLICA_USER: ${settings.repl_user:repl-test}
      REPLICA_PSWD: ${settings.repl_pswd:abcABC123}

mixins:
  - https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v2.5.0/scripts/common.yml

onBeforeClone:
  stopEvent:
    type: warning
    message: Cloning is not supported for multiregion cluster. 

onBeforeMigrate:
  stopEvent:
    type: warning
    message: Migration is not supported for multiregion cluster.

onBeforeRemoveNode[sqldb]:
  stopEvent:
    type: warning
    message: Scaling is not supported for multiregion cluster.

onBeforeAddNode[sqldb]:
  stopEvent:
    type: warning
    message: Scaling is not supported for multiregion cluster.

globals:
  PATH: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v2.5.0
  DB_USER: ${settings.db_user:user-test}
  DB_PASS: ${settings.db_pswd:abcABC123}
  vpnAppid: ${settings.vpnAppid}

onInstall:
  - getReplicaUser
  - getEnvIndex
  - setGlobals:
      index: ${response.index}
  - if (${globals.index} == 1) || (${globals.index} == 2):
    - api: env.control.SetEnvDisplayName
      displayName: ${env.envName} Primary-${globals.index} ${env.region}
    - primaryConfiguration: ${globals.index}
  - else: 
    - api: env.control.SetEnvDisplayName
      displayName: ${env.envName} Secondary ${env.region}  
    - secondaryConfiguration
    - if (!/vpnAppid/.test("${globals.vpnAppid}")):
      - installAddon:
          id: internal_network
          nodeGroup: sqldb
  - setupUsers:
      id: ${nodes.sqldb.master.id}

addons:
  - id: internal_network
    name: Internal Network Add-on
    settings:
      mainAppid: 36e23b2951e1884b53e97eb6e68ae50c
    onBeforeDelete:
      callScript:
        action: DeleteEnv

    onBeforeRemoveNode:
      callScript:
        action: RemoveNode
        nodeId: ${event.params.nodeid}

    onAfterAddNode:
      callScript:
        action: AddNode
        nodeId: ${event.response.node.id}

    onAfterClone:
      - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
      - install: ${response.jps}
        envName: ${event.response.env.envName}
          

    onAfterCloneNodes:
      forEach(node:event.response.array):
        callScript:
          action: AddNode
          nodeId: ${@node.id}

    onBeforeMigrate:
      callScript:
        action: MigrateEnvCheck
        hostGroup: ${event.params.hardwareNodeGroup}

      if(${globals.NEED_DETACH}):
        callScript:
          action: DeleteEnv

    onAfterMigrate:
      callScript:
        action: CreateEnv


    onInstall:
      callScript:
        action: CreateEnv

    actions:
      callScript:
        - script: |-
            appId = '${this.appid:0}'
            if(appId == 0) appId = '${env.appid}';
            hostGroup = '${this.hostGroup:0}'
            if(hostGroup == 0) hostGroup = '${env.hostGroup.uniqueName}';
            var params = { envAppid: appId, action: "${this.action}", nodeId:"${this.nodeId:0}", hostGroup: hostGroup }, 
                resp = jelastic.dev.scripting.Eval("${globals.vpnAppid}", session, "vpn.VPNController", params);
            return resp.response ? resp.response:resp;

actions:
  getEnvIndex:
    - script: |
        var envNameSeparator = "-", index, tmp;
        tmp = '${env.envName}'.split(envNameSeparator);
        index = tmp.pop();
        if (/\d+/.test(index)) {
            index = parseInt(index, 10);
        } else {
            index = null;
        }        
        return { result: 0, index: index };
        
  primaryConfiguration:
    - cmd[${nodes.sqldb.master.id}]: |-
        wget ${globals.PATH}/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log;
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf; 
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/master.cnf;
        sed -i "s/auto-increment-offset.*/auto-increment-offset = ${this}/" /etc/mysql/conf.d/master.cnf;
        sed -i '/log-slave-updates/d' /etc/mysql/conf.d/master.cnf;

  secondaryConfiguration:
    - cmd[${nodes.sqldb.master.id}]: |-
        wget ${globals.PATH}/configs/slave.cnf -O /etc/mysql/conf.d/slave.cnf &>> /var/log/run.log;
        sed -i "s/report_host.*/report_host = node${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i "s/server-id.*/server-id = ${nodes.sqldb.master.id}/" /etc/mysql/conf.d/slave.cnf;
        sed -i '/log-slave-updates/d' /etc/mysql/conf.d/slave.cnf;
        sed -i '/read_only.*/d' /etc/mysql/conf.d/slave.cnf;
